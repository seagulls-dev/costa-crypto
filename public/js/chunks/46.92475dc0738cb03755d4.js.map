{"version":3,"sources":["webpack:///./resources/routes/auth/components/resetPassword/components/SendEmailToken/index.js","webpack:///./resources/routes/auth/components/resetPassword/components/SendPhoneToken/index.js","webpack:///./resources/routes/auth/components/resetPassword/components/VerifyEmailToken/index.js","webpack:///./resources/routes/auth/components/resetPassword/components/VerifyPhoneToken/index.js","webpack:///./resources/routes/auth/components/resetPassword/index.js","webpack:///./resources/routes/auth/index.js"],"names":["messages","defineMessages","successful","SendEmailToken","e","form","intl","axios","route","endpoint","handleFormSuccess","confirmLoading","values","handleFormError","target","onSent","recaptcha","getFieldDecorator","getFieldError","handleSubmit","rules","required","type","Component","mapStateToProps","pipe","connect","formHelper","invalidPhone","SendPhoneToken","data","countryData","component","validator","callback","VerifyEmailToken","requestData","email","nonce","onVerified","VerifyPhoneToken","phone","password","verifyPassword","ResetPassword","verification","value","tokenSent","history","token","radioStyle","display","padding","resend","resendToken","handleTokenSent","Auth","auth","match","path","module"],"mappings":"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","file":"js/chunks/46.92475dc0738cb03755d4.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {defineMessages, FormattedMessage} from \"react-intl\";\r\nimport ApiService from \"support/Services/Api\";\r\nimport {pipe} from \"support/utils/common\";\r\nimport formHelper from \"support/Helpers/Form\";\r\nimport {isEmpty} from \"lodash\";\r\nimport {handleFormError, handleFormSuccess} from \"support/utils/promise\";\r\nimport ReCaptcha from \"containers/components/ReCaptcha\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst messages = defineMessages({\r\n\tsuccessful : {\r\n\t\tdefaultMessage : \"Your action was successful.\",\r\n\t\tid             : \"reset_password.send_action_successful\"\r\n\t},\r\n});\r\n\r\nclass SendEmailToken extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.api = new ApiService();\r\n\r\n\t\tthis.state = {\r\n\t\t\tconfirmLoading : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.api.cancel();\r\n\t}\r\n\r\n\ttriggerSent(target) {\r\n\t\tconst {onSent} = this.props;\r\n\t\tif (typeof onSent === \"function\") {\r\n\t\t\treturn onSent(target);\r\n\t\t}\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst {form, intl} = this.props;\r\n\t\tconst {axios, route} = this.api;\r\n\t\tconst endpoint = route('auth.reset-password.send-email-token');\r\n\r\n\t\tform.validateFields((errors, values) => {\r\n\t\t\tif (isEmpty(errors)) {\r\n\t\t\t\taxios.post(endpoint.url(), values)\r\n\t\t\t\t\t.then(response => handleFormSuccess(response, form, () => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t\tthis.triggerSent(values.email)\r\n\t\t\t\t\t}, intl.formatMessage(messages.successful)))\r\n\r\n\t\t\t\t\t.catch(error => handleFormError(error, form, values, () => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t}));\r\n\r\n\t\t\t\tthis.setState({confirmLoading : true});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {intl, form, recaptcha} = this.props;\r\n\t\tconst {getFieldDecorator, getFieldError} = form;\r\n\t\tconst {confirmLoading} = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<Form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<Form.Item className=\"mt-3\">\r\n\t\t\t\t\t{getFieldDecorator('email', {\r\n\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t{required : true},\r\n\t\t\t\t\t\t\t{type : 'email'}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<Input/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t{recaptcha.enable && (\r\n\t\t\t\t\t<Form.Item>\r\n\t\t\t\t\t\t{getFieldDecorator('recaptcha', {\r\n\t\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t\t{required : true}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t})(\r\n\t\t\t\t\t\t\t<ReCaptcha errors={getFieldError('recaptcha')}\r\n\t\t\t\t\t\t\t           settings={recaptcha}/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<Button loading={confirmLoading}\r\n\t\t\t\t        type=\"primary\" htmlType=\"submit\">\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<FormattedMessage\r\n\t\t\t\t\t\t\tdefaultMessage=\"Send Code\"\r\n\t\t\t\t\t\t\tid=\"common.send_code\"/>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</Button>\r\n\t\t\t</Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = ({\r\n\tsettings : {\r\n\t\trecaptcha\r\n\t},\r\n}) => ({\r\n\trecaptcha\r\n});\r\n\r\nexport default pipe(\r\n\tconnect(\r\n\t\tmapStateToProps\r\n\t),\r\n\tformHelper(),\r\n)(SendEmailToken);","import React, {Component} from 'react';\r\nimport {Button, Form} from \"antd\";\r\nimport PhoneInput from \"components/PhoneInput\";\r\nimport {defineMessages, FormattedMessage, injectIntl} from \"react-intl\";\r\nimport ApiService from \"support/Services/Api\";\r\nimport {pipe} from \"support/utils/common\";\r\nimport formHelper from \"support/Helpers/Form\";\r\nimport {assign, isEmpty} from \"lodash\";\r\nimport {handleFormError, handleFormSuccess} from \"support/utils/promise\";\r\nimport ReCaptcha from \"containers/components/ReCaptcha\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst messages = defineMessages({\r\n\tinvalidPhone : {\r\n\t\tdefaultMessage : \"You phone is invalid.\",\r\n\t\tid             : \"reset_password.invalid_phone\"\r\n\t},\r\n\r\n\tsuccessful : {\r\n\t\tdefaultMessage : \"Your action was successful.\",\r\n\t\tid             : \"reset_password.send_action_successful\"\r\n\t},\r\n});\r\n\r\nclass SendPhoneToken extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.api = new ApiService();\r\n\r\n\t\tthis.state = {\r\n\t\t\tconfirmLoading : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.api.cancel();\r\n\t}\r\n\r\n\ttriggerSent(target) {\r\n\t\tconst {onSent} = this.props;\r\n\t\tif (typeof onSent === \"function\") {\r\n\t\t\treturn onSent(target);\r\n\t\t}\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst {form, intl} = this.props;\r\n\t\tconst {axios, route} = this.api;\r\n\t\tconst endpoint = route('auth.reset-password.send-phone-token');\r\n\r\n\t\tform.validateFields((errors, values) => {\r\n\t\t\tif (isEmpty(errors)) {\r\n\t\t\t\tlet data = assign({}, values);\r\n\r\n\t\t\t\tif (this.itl) {\r\n\t\t\t\t\tconst countryData = this.itl.getSelectedCountryData();\r\n\t\t\t\t\tdata['phone_country'] = countryData.iso2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxios.post(endpoint.url(), data)\r\n\t\t\t\t\t.then(response => handleFormSuccess(response, form, () => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t\tthis.triggerSent(data.phone)\r\n\t\t\t\t\t}, intl.formatMessage(messages.successful)))\r\n\r\n\t\t\t\t\t.catch(error => handleFormError(error, form, data, () => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t}));\r\n\r\n\t\t\t\tthis.setState({confirmLoading : true});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {intl, form, recaptcha} = this.props;\r\n\t\tconst {getFieldDecorator, getFieldError} = form;\r\n\t\tconst {confirmLoading} = this.state;\r\n\r\n\t\tconst component = this;\r\n\r\n\t\treturn (\r\n\t\t\t<Form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<Form.Item className=\"mt-3\">\r\n\t\t\t\t\t{getFieldDecorator('phone', {\r\n\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t{required : true},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvalidator : function (rule, value, callback) {\r\n\t\t\t\t\t\t\t\t\tif (component.itl && !component.itl.isValidNumber() && value) {\r\n\t\t\t\t\t\t\t\t\t\tcallback(intl.formatMessage(messages.invalidPhone));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tcallback()\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<PhoneInput\r\n\t\t\t\t\t\t\titl={itl => component.itl = itl}/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t{recaptcha.enable && (\r\n\t\t\t\t\t<Form.Item>\r\n\t\t\t\t\t\t{getFieldDecorator('recaptcha', {\r\n\t\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t\t{required : true}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t})(\r\n\t\t\t\t\t\t\t<ReCaptcha errors={getFieldError('recaptcha')}\r\n\t\t\t\t\t\t\t           settings={recaptcha}/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<Button loading={confirmLoading}\r\n\t\t\t\t        type=\"primary\" htmlType=\"submit\">\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<FormattedMessage\r\n\t\t\t\t\t\t\tdefaultMessage=\"Send Code\"\r\n\t\t\t\t\t\t\tid=\"common.send_code\"/>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</Button>\r\n\t\t\t</Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = ({\r\n\tsettings : {\r\n\t\trecaptcha\r\n\t},\r\n}) => ({\r\n\trecaptcha\r\n});\r\n\r\nexport default pipe(\r\n\tconnect(\r\n\t\tmapStateToProps\r\n\t),\r\n\tformHelper(),\r\n\tinjectIntl,\r\n)(SendPhoneToken);","import React, {Component} from 'react';\r\nimport {pipe} from \"support/utils/common\";\r\nimport formHelper from \"support/Helpers/Form\";\r\nimport {defineMessages, FormattedMessage} from \"react-intl\";\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {isEmpty} from \"lodash\";\r\nimport {handleFormError, handleFormSuccess} from \"support/utils/promise\";\r\nimport ApiService from \"support/Services/Api\";\r\n\r\nconst messages = defineMessages({\r\n\tsuccessful : {\r\n\t\tdefaultMessage : \"Your action was successful.\",\r\n\t\tid             : \"reset_password.verification_action_successful\"\r\n\t},\r\n});\r\n\r\nclass VerifyEmailToken extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.api = new ApiService();\r\n\r\n\t\tthis.state = {\r\n\t\t\tconfirmLoading : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.api.cancel();\r\n\t}\r\n\r\n\ttriggerVerified(nonce) {\r\n\t\tconst {onVerified} = this.props;\r\n\t\tif (typeof onVerified === \"function\") {\r\n\t\t\treturn onVerified(nonce);\r\n\t\t}\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst {form, intl, target} = this.props;\r\n\t\tconst {axios, route} = this.api;\r\n\t\tconst endpoint = route('auth.reset-password.verify-email-token');\r\n\r\n\t\tform.validateFields((errors, values) => {\r\n\t\t\tif (isEmpty(errors)) {\r\n\t\t\t\tconst requestData = {...values, email: target};\r\n\r\n\t\t\t\taxios.post(endpoint.url(), requestData)\r\n\t\t\t\t\t.then(response => handleFormSuccess(response, form, (data) => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t\tthis.triggerVerified(data.token)\r\n\t\t\t\t\t}, intl.formatMessage(messages.successful)))\r\n\r\n\t\t\t\t\t.catch(error => handleFormError(error, form, requestData, () => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t}));\r\n\r\n\t\t\t\tthis.setState({confirmLoading : true});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {intl, form} = this.props;\r\n\t\tconst {confirmLoading} = this.state;\r\n\t\tconst {getFieldDecorator} = form;\r\n\r\n\t\treturn (\r\n\t\t\t<Form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<Form.Item className=\"mt-3\">\r\n\t\t\t\t\t{getFieldDecorator('token', {\r\n\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t{required : true},\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<Input/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t<Button loading={confirmLoading}\r\n\t\t\t\t        type=\"primary\" htmlType=\"submit\">\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<FormattedMessage\r\n\t\t\t\t\t\t\tdefaultMessage=\"Verify Code\"\r\n\t\t\t\t\t\t\tid=\"common.verify_code\"/>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</Button>\r\n\t\t\t</Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default pipe(\r\n\tformHelper(),\r\n)(VerifyEmailToken);","import React, {Component} from 'react';\r\nimport {pipe} from \"support/utils/common\";\r\nimport formHelper from \"support/Helpers/Form\";\r\nimport {defineMessages, FormattedMessage} from \"react-intl\";\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {isEmpty} from \"lodash\";\r\nimport {handleFormError, handleFormSuccess} from \"support/utils/promise\";\r\nimport ApiService from \"support/Services/Api\";\r\n\r\nconst messages = defineMessages({\r\n\tsuccessful : {\r\n\t\tdefaultMessage : \"Your action was successful.\",\r\n\t\tid             : \"reset_password.verification_action_successful\"\r\n\t},\r\n});\r\n\r\nclass VerifyPhoneToken extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.api = new ApiService();\r\n\r\n\t\tthis.state = {\r\n\t\t\tconfirmLoading : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.api.cancel();\r\n\t}\r\n\r\n\ttriggerVerified(nonce) {\r\n\t\tconst {onVerified} = this.props;\r\n\t\tif (typeof onVerified === \"function\") {\r\n\t\t\treturn onVerified(nonce);\r\n\t\t}\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst {form, intl, target} = this.props;\r\n\t\tconst {axios, route} = this.api;\r\n\t\tconst endpoint = route('auth.reset-password.verify-phone-token');\r\n\r\n\t\tform.validateFields((errors, values) => {\r\n\t\t\tif (isEmpty(errors)) {\r\n\t\t\t\tconst requestData = {...values, phone: target};\r\n\r\n\t\t\t\taxios.post(endpoint.url(), requestData)\r\n\t\t\t\t\t.then(response => handleFormSuccess(response, form, (data) => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t\tthis.triggerVerified(data.token)\r\n\t\t\t\t\t}, intl.formatMessage(messages.successful)))\r\n\r\n\t\t\t\t\t.catch(error => handleFormError(error, form, requestData, () => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t}));\r\n\r\n\t\t\t\tthis.setState({confirmLoading : true});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {intl, form} = this.props;\r\n\t\tconst {confirmLoading} = this.state;\r\n\t\tconst {getFieldDecorator} = form;\r\n\r\n\t\treturn (\r\n\t\t\t<Form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<Form.Item className=\"mt-3\">\r\n\t\t\t\t\t{getFieldDecorator('token', {\r\n\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t{required : true},\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})(\r\n\t\t\t\t\t\t<Input/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t<Button loading={confirmLoading}\r\n\t\t\t\t        type=\"primary\" htmlType=\"submit\">\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<FormattedMessage\r\n\t\t\t\t\t\t\tdefaultMessage=\"Verify Code\"\r\n\t\t\t\t\t\t\tid=\"common.verify_code\"/>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</Button>\r\n\t\t\t</Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default pipe(\r\n\tformHelper(),\r\n)(VerifyPhoneToken);","import React, {Component} from 'react';\r\nimport {Alert, Button, Form, Icon, Input, Radio} from \"antd\";\r\nimport {defineMessages, FormattedMessage} from \"react-intl\";\r\nimport ApiService from \"support/Services/Api\";\r\nimport SendEmailToken from \"routes/auth/components/resetPassword/components/SendEmailToken\";\r\nimport SendPhoneToken from \"routes/auth/components/resetPassword/components/SendPhoneToken\";\r\nimport VerifyEmailToken from \"routes/auth/components/resetPassword/components/VerifyEmailToken\";\r\nimport VerifyPhoneToken from \"routes/auth/components/resetPassword/components/VerifyPhoneToken\";\r\nimport {pipe} from \"support/utils/common\";\r\nimport formHelper from \"support/Helpers/Form\";\r\nimport {isEmpty} from \"lodash\";\r\nimport {handleFormError, handleFormSuccess} from \"support/utils/promise\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport ReCaptcha from \"containers/components/ReCaptcha\";\r\n\r\n\r\nconst messages = defineMessages({\r\n\tsuccessful : {\r\n\t\tdefaultMessage : \"Password changed Successfully.\",\r\n\t\tid             : \"reset_password.successful\"\r\n\t},\r\n\r\n\tpassword : {\r\n\t\tdefaultMessage : \"Password\",\r\n\t\tid             : \"reset_password.password\"\r\n\t},\r\n\r\n\tverifyPassword : {\r\n\t\tdefaultMessage : \"Verify Password\",\r\n\t\tid             : \"reset_password.verify_password\"\r\n\t},\r\n});\r\n\r\nclass ResetPassword extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.api = new ApiService();\r\n\r\n\t\tthis.state = {\r\n\t\t\ttarget         : \"\",\r\n\t\t\tverification   : \"email\",\r\n\t\t\tnonce          : \"\",\r\n\t\t\tconfirmLoading : false,\r\n\t\t\ttokenSent      : false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.api.cancel();\r\n\t}\r\n\r\n\thandleVerificationChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tverification : e.target.value,\r\n\t\t});\r\n\t};\r\n\r\n\thandleTokenSent = (target) => {\r\n\t\tthis.setState({\r\n\t\t\ttarget    : target,\r\n\t\t\ttokenSent : true,\r\n\t\t})\r\n\t};\r\n\r\n\thandleTokenVerified = (nonce) => {\r\n\t\tthis.setState({\r\n\t\t\tnonce : nonce\r\n\t\t})\r\n\t};\r\n\r\n\tresendToken = () => {\r\n\t\tthis.setState({\r\n\t\t\ttarget    : \"\",\r\n\t\t\ttokenSent : false,\r\n\t\t\tnonce     : \"\"\r\n\t\t})\r\n\t};\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst {nonce, verification, target} = this.state;\r\n\t\tconst {axios, route} = this.api;\r\n\t\tconst {form, intl, history} = this.props;\r\n\r\n\t\tconst endpoint = route('auth.reset-password.reset');\r\n\r\n\t\tform.validateFields((errors, values) => {\r\n\t\t\tif (isEmpty(errors)) {\r\n\t\t\t\tconst requestData = {...values, token : nonce};\r\n\t\t\t\trequestData[verification] = target;\r\n\r\n\t\t\t\taxios.post(endpoint.url(), requestData)\r\n\t\t\t\t\t.then(response => handleFormSuccess(response, form, () => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t\tif (!isEmpty(history)) history.replace(\"/\");\r\n\t\t\t\t\t}, intl.formatMessage(messages.successful)))\r\n\r\n\t\t\t\t\t.catch(error => handleFormError(error, form, requestData, () => {\r\n\t\t\t\t\t\tthis.setState({confirmLoading : false});\r\n\t\t\t\t\t}));\r\n\r\n\t\t\t\tthis.setState({confirmLoading : true});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {intl, form, recaptcha} = this.props;\r\n\t\tconst {verification, tokenSent, target, nonce, confirmLoading} = this.state;\r\n\t\tconst {getFieldDecorator, getFieldError} = form;\r\n\r\n\t\tconst radioStyle = {display : 'block', padding : '10px 0'};\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"cp-login-container\">\r\n\t\t\t\t<div className=\"cp-login-content\">\r\n\t\t\t\t\t<div className=\"text-center cp-login-header\">\r\n\t\t\t\t\t\t<h1 className=\"cp-login-title\">\r\n\t\t\t\t\t\t\t<FormattedMessage\r\n\t\t\t\t\t\t\t\tdefaultMessage=\"Reset Password\"\r\n\t\t\t\t\t\t\t\tid=\"common.reset_password\"/>\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{!nonce && (\r\n\t\t\t\t\t\t<div className=\"text-justify\">\r\n\t\t\t\t\t\t\t{!tokenSent ? (\r\n\t\t\t\t\t\t\t\t<Alert type=\"info\"\r\n\t\t\t\t\t\t\t\t       message={\r\n\t\t\t\t\t\t\t\t\t       <FormattedMessage\r\n\t\t\t\t\t\t\t\t\t\t       defaultMessage={\r\n\t\t\t\t\t\t\t\t\t\t\t       \"Select your preferred {verification} method to reset your password.\" +\r\n\t\t\t\t\t\t\t\t\t\t\t       \" We will send you a code if this method is associated with any account and has been verified.\"\r\n\t\t\t\t\t\t\t\t\t\t       }\r\n\t\t\t\t\t\t\t\t\t\t       id=\"reset_password.select_method_info\"\r\n\t\t\t\t\t\t\t\t\t\t       values={{\r\n\t\t\t\t\t\t\t\t\t\t\t       verification : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t       <span className=\"font-weight-semi-bold\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t       <FormattedMessage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t       defaultMessage=\"Verification\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t       id=\"common.verification\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t       </span>\r\n\t\t\t\t\t\t\t\t\t\t\t       )\r\n\t\t\t\t\t\t\t\t\t\t       }}/>\r\n\t\t\t\t\t\t\t\t       }/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<Alert type=\"success\"\r\n\t\t\t\t\t\t\t\t       message={\r\n\t\t\t\t\t\t\t\t\t       <FormattedMessage\r\n\t\t\t\t\t\t\t\t\t\t       defaultMessage={\r\n\t\t\t\t\t\t\t\t\t\t\t       \"A code has been sent to your selected method, \" +\r\n\t\t\t\t\t\t\t\t\t\t\t       \"you should receive it if it is associated with an account and has been verified. \" +\r\n\t\t\t\t\t\t\t\t\t\t\t       \"Enter the code received below to continue. {resend}\"\r\n\t\t\t\t\t\t\t\t\t\t       }\r\n\t\t\t\t\t\t\t\t\t\t       id=\"reset_password.verify_token_info\"\r\n\t\t\t\t\t\t\t\t\t\t       values={{\r\n\t\t\t\t\t\t\t\t\t\t\t       resend : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t       <a className=\"font-weight-semi-bold\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t          onClick={this.resendToken}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t       <FormattedMessage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t       defaultMessage=\"Resend Code?\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t       id=\"common.resend_code\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t       </a>\r\n\t\t\t\t\t\t\t\t\t\t\t       )\r\n\t\t\t\t\t\t\t\t\t\t       }}/>\r\n\t\t\t\t\t\t\t\t       }/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t<div className=\"mt-3\">\r\n\t\t\t\t\t\t{!tokenSent && (\r\n\t\t\t\t\t\t\t<Radio.Group\r\n\t\t\t\t\t\t\t\tonChange={this.handleVerificationChange}\r\n\t\t\t\t\t\t\t\tvalue={verification}>\r\n\t\t\t\t\t\t\t\t<Radio style={radioStyle} value=\"email\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"font-weight-medium\">\r\n\t\t\t\t\t\t\t\t\t\t<FormattedMessage\r\n\t\t\t\t\t\t\t\t\t\t\tdefaultMessage=\"Email Address\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"common.email_address\"/>\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</Radio>\r\n\r\n\t\t\t\t\t\t\t\t<Radio style={radioStyle} value=\"phone\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"font-weight-medium\">\r\n\t\t\t\t\t\t\t\t\t\t<FormattedMessage\r\n\t\t\t\t\t\t\t\t\t\t\tdefaultMessage=\"Phone Number\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"common.phone_number\"/>\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</Radio>\r\n\t\t\t\t\t\t\t</Radio.Group>\r\n\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t{!nonce ? (\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{verification === \"email\" && (\r\n\t\t\t\t\t\t\t\t\ttokenSent && target ? (\r\n\t\t\t\t\t\t\t\t\t\t<VerifyEmailToken\r\n\t\t\t\t\t\t\t\t\t\t\tonVerified={this.handleTokenVerified}\r\n\t\t\t\t\t\t\t\t\t\t\ttarget={target}/>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<SendEmailToken\r\n\t\t\t\t\t\t\t\t\t\t\tonSent={this.handleTokenSent}/>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{verification === \"phone\" && (\r\n\t\t\t\t\t\t\t\t\ttokenSent && target ? (\r\n\t\t\t\t\t\t\t\t\t\t<VerifyPhoneToken\r\n\t\t\t\t\t\t\t\t\t\t\tonVerified={this.handleTokenVerified}\r\n\t\t\t\t\t\t\t\t\t\t\ttarget={target}/>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<SendPhoneToken\r\n\t\t\t\t\t\t\t\t\t\t\tonSent={this.handleTokenSent}/>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<Form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t\t\t\t<Form.Item>\r\n\t\t\t\t\t\t\t\t\t{getFieldDecorator('password', {\r\n\t\t\t\t\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t\t\t\t\t{required : true}\r\n\t\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\t})(\r\n\t\t\t\t\t\t\t\t\t\t<Input.Password\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder={intl.formatMessage(messages.password)}\r\n\t\t\t\t\t\t\t\t\t\t\tprefix={<Icon type=\"lock\"/>}/>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t\t\t\t\t<Form.Item>\r\n\t\t\t\t\t\t\t\t\t{getFieldDecorator('password_confirmation', {\r\n\t\t\t\t\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t\t\t\t\t{required : true}\r\n\t\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\t})(\r\n\t\t\t\t\t\t\t\t\t\t<Input.Password\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder={intl.formatMessage(messages.verifyPassword)}\r\n\t\t\t\t\t\t\t\t\t\t\tprefix={<Icon type=\"lock\"/>}/>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t\t\t\t\t{recaptcha.enable && (\r\n\t\t\t\t\t\t\t\t\t<Form.Item>\r\n\t\t\t\t\t\t\t\t\t\t{getFieldDecorator('recaptcha', {\r\n\t\t\t\t\t\t\t\t\t\t\trules : [\r\n\t\t\t\t\t\t\t\t\t\t\t\t{required : true}\r\n\t\t\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\t\t})(\r\n\t\t\t\t\t\t\t\t\t\t\t<ReCaptcha errors={getFieldError('recaptcha')}\r\n\t\t\t\t\t\t\t\t\t\t\t           settings={recaptcha}/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t<Form.Item className=\"text-center\">\r\n\t\t\t\t\t\t\t\t\t<Button loading={confirmLoading}\r\n\t\t\t\t\t\t\t\t\t        htmlType=\"submit\" type=\"primary\">\r\n\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t<FormattedMessage\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefaultMessage=\"Change Password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"common.change_password\"/>\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = ({\r\n\tsettings : {\r\n\t\trecaptcha\r\n\t},\r\n}) => ({\r\n\trecaptcha\r\n});\r\n\r\nexport default pipe(\r\n\tconnect(\r\n\t\tmapStateToProps\r\n\t),\r\n\tformHelper(),\r\n\twithRouter\r\n)(ResetPassword);","import React from 'react';\r\nimport AuthModel from \"support/Auth\";\r\nimport {pipe} from \"support/utils/common\";\r\nimport {connect} from \"react-redux\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport CustomRedirect from \"components/CustomRedirect\";\r\nimport ResetPassword from \"./components/resetPassword\";\r\n\r\nconst Auth = ({auth, match}) => {\r\n\tif (auth.check()) {\r\n\t\treturn <CustomRedirect to=\"/\" status={302}/>;\r\n\t}\r\n\r\n\tconst path = match.path;\r\n\r\n\treturn (\r\n\t\t<Switch>\r\n\t\t\t<CustomRedirect from={`${path}/`} to={`${path}/reset_password`} exact status={301}/>\r\n\t\t\t<Route path={`${path}/reset_password`} component={ResetPassword}/>\r\n\t\t</Switch>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = ({\r\n\tauth\r\n}) => ({\r\n\tauth : new AuthModel(auth)\r\n});\r\n\r\nexport default pipe(\r\n\tconnect(\r\n\t\tmapStateToProps\r\n\t),\r\n)(Auth);\r\n\r\nif (module.hot) {\r\n\tmodule.hot.accept()\r\n}"],"sourceRoot":""}