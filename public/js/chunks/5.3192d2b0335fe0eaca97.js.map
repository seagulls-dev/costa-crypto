{"version":3,"sources":["webpack:///./resources/modules/millify/index.js"],"names":["DEFAULT_BASE","DEFAULT_PRECISION","DEFAULT_DECIMAL_SEPARATOR","ERROR_INVALID_VALUE","ERROR_UNSAFE_VALUE","ERROR_INFINITE_VALUE","ERROR_INVALID_PRECISION","ERROR_INVALID_UNITS","UNIT_THOUSAND","UNIT_MILLION","UNIT_BILLION","UNIT_TRILLION","UNIT_QUADRILLION","UNIT_QUINTILLION","defaultOptions","base","precision","decimalSeparator","lowerCase","space","units","parseValue","val","parseFloat","Number","divider","denominator","count","result","value","round","Millify","options","opts","Array","prefix","Math","unit","div","suffix","rounded","formatted"],"mappings":"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","file":"js/chunks/5.3192d2b0335fe0eaca97.js","sourcesContent":["const DEFAULT_BASE = 1000\r\nconst DEFAULT_PRECISION = 2\r\nconst DEFAULT_DECIMAL_SEPARATOR = '.'\r\n\r\nconst ERROR_INVALID_VALUE = 'Value must be a valid number'\r\nconst ERROR_UNSAFE_VALUE = 'Value is either too big or too small'\r\nconst ERROR_INFINITE_VALUE = 'Value must be a finite number'\r\nconst ERROR_INVALID_PRECISION = 'Precision must be a non-negative integer'\r\nconst ERROR_INVALID_UNITS = 'Units must be an array'\r\n\r\nconst UNIT_THOUSAND = 'K'\r\nconst UNIT_MILLION = 'M'\r\nconst UNIT_BILLION = 'B'\r\nconst UNIT_TRILLION = 'T'\r\nconst UNIT_QUADRILLION = 'P'\r\nconst UNIT_QUINTILLION = 'E'\r\n\r\nconst defaultOptions = {\r\n  base: DEFAULT_BASE,\r\n  precision: DEFAULT_PRECISION,\r\n  decimalSeparator: DEFAULT_DECIMAL_SEPARATOR,\r\n  lowerCase: false,\r\n  space: false,\r\n  units: [\r\n    '',\r\n    UNIT_THOUSAND,\r\n    UNIT_MILLION,\r\n    UNIT_BILLION,\r\n    UNIT_TRILLION,\r\n    UNIT_QUADRILLION,\r\n    UNIT_QUINTILLION,\r\n  ],\r\n}\r\n\r\n/**\r\n * parseValue ensures the value is a number and within accepted range.\r\n *\r\n * @param {number} value\r\n */\r\nconst parseValue = value => {\r\n  const val = parseFloat(value)\r\n  if (Number.isNaN(val)) {\r\n    throw new Error(ERROR_INVALID_VALUE)\r\n  }\r\n  if (val > Number.MAX_SAFE_INTEGER || val < Number.MIN_SAFE_INTEGER) {\r\n    throw new RangeError(ERROR_UNSAFE_VALUE)\r\n  }\r\n  return val\r\n}\r\n\r\n/**\r\n * divider is a generator that divides a value by a denominator defined\r\n * by the grouping base (default 1000). Each successive turn multipies\r\n * the base by itself, resulting in a decimal and a unit (count).\r\n *\r\n * @param {number} value - Number to be divided\r\n * @param {number} base - Grouping base/interval\r\n */\r\nconst divider = function*(value, base) {\r\n  let denominator = base\r\n  let count = 0\r\n\r\n  while (true) {\r\n    const result = value / denominator\r\n    if (result < 1) {\r\n      return\r\n    }\r\n\r\n    yield { result, count: ++count }\r\n\r\n    // Increase the denominator each turn\r\n    denominator *= base\r\n  }\r\n}\r\n\r\n/**\r\n * round up a number to specified precision\r\n *\r\n * @param {number} value - Number to be rounded\r\n * @param {number} precision - Significant places\r\n */\r\nconst round = (value, precision) => {\r\n  if (!Number.isFinite(value)) {\r\n    throw new Error(ERROR_INFINITE_VALUE)\r\n  }\r\n  if (!Number.isInteger(precision) || precision < 0) {\r\n    throw new Error(ERROR_INVALID_PRECISION)\r\n  }\r\n  if (Number.isInteger(value)) {\r\n    return value\r\n  }\r\n  return parseFloat(value.toFixed(precision))\r\n}\r\n\r\n/**\r\n * Millify converts long numbers to human-readable strings.\r\n *\r\n * @param {number} value - Number to convert\r\n * @param {Object} options\r\n * @param {number} options.precision - Number of significant figures\r\n * @param {string} options.decimalSeparator - Type of decimal marker\r\n * @param {boolean} options.lowerCase - Lowercase units\r\n * @param {boolean} options.space - Space between number and abbreviation\r\n * @param {number} options.base - Numerical group\r\n * @param {Array<string>} options.units - List of units\r\n */\r\nconst Millify = (value, options = {}) => {\r\n  // Override default options with supplied ones\r\n  const opts = { ...defaultOptions, ...options }\r\n\r\n  if (!Array.isArray(opts.units) || !opts.units.length) {\r\n    throw new Error(ERROR_INVALID_UNITS)\r\n  }\r\n\r\n  // Validate value for type and length\r\n  let val = parseValue(value)\r\n\r\n  // Add a minus sign (-) prefix if it's a negative number\r\n  const prefix = val < 0 ? '-' : ''\r\n\r\n  // Work with positive values\r\n  val = Math.abs(val)\r\n\r\n  // Keep dividing the input value by the numerical grouping value (base)\r\n  // until the decimal and unit is deciphered\r\n  let unit = 0\r\n  for (const div of divider(val, opts.base)) {\r\n    val = div.result\r\n    unit = div.count\r\n  }\r\n\r\n  // Avoid out of bounds error by using the last available unit\r\n  unit = unit > opts.units.length ? opts.units.length - 1 : unit\r\n\r\n  // Calculate the unit suffix and apply lowercase option\r\n  const suffix = opts.lowerCase\r\n    ? opts.units[unit].toLowerCase()\r\n    : opts.units[unit]\r\n\r\n  // Add a space between number and abbreviation\r\n  const space = opts.space ? ' ' : ''\r\n\r\n  // Round decimal up to desired precision\r\n  const rounded = round(val, opts.precision)\r\n\r\n  // Replace decimal mark if desired\r\n  const formatted = rounded\r\n    .toString()\r\n    .replace(DEFAULT_DECIMAL_SEPARATOR, opts.decimalSeparator)\r\n\r\n  return `${prefix}${formatted}${space}${suffix}`\r\n}\r\n\r\nexport default Millify\r\n"],"sourceRoot":""}